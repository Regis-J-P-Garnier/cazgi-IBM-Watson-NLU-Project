{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","className","this","props","emotions","map","item","index","JSON","stringify","React","Component","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","logvalue","setLogReturnedValue","data","renderTextArea","document","getElementById","value","setState","renderTextBox","sendForSentimentAnalysis","url","response","keywords","sendForEmotionAnalysis","title","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"qQA2BeA,E,4JAvBX,WACE,OACE,8BAGE,uBAAOC,UAAU,uBAAjB,SACE,gCAEAC,KAAKC,MAAMC,SAASC,KAAI,SAACC,EAAMC,GAC3B,OACA,+BACA,6BAAKC,KAAKC,UAAU,CAACH,WACrB,6BAAKE,KAAKC,UAAU,CAACF,4B,GAbVG,IAAMC,WCyIlBC,G,kNApIbC,MAAQ,CAACC,UAAU,0BAAUC,KAAK,IAAIC,KAAK,KAAKC,GAAG,cACzCC,KAAM,OACRC,gBAAgB,GAChBC,WAAU,EACVC,SAAS,I,EAIjBC,oBAAsB,SAACC,GACnB,EAAKF,SAAWb,KAAKC,UAAUc,EAAM,KAAM,I,EAG/CC,eAAiB,WACfC,SAASC,eAAe,aAAaC,MAAQ,GACtB,QAApB,EAAKd,MAAMK,MACZ,EAAKU,SAAS,CAACd,UAAU,0BAAUC,KAAK,IAAIC,KAAK,KAAKC,GAAG,cACzDC,KAAM,OACNC,gBAAgB,GAChBC,WAAU,K,EAKdS,cAAgB,WACdJ,SAASC,eAAe,aAAaC,MAAQ,GACtB,SAApB,EAAKd,MAAMK,MACZ,EAAKU,SAAS,CAACd,UAAU,0BAAUC,KAAK,IAAIC,KAAK,KAAKC,GAAG,cACzDC,KAAM,MACNC,gBAAgB,GAChBC,WAAU,K,EAadU,yBAA2B,WACzB,EAAKF,SAAS,CAACR,WAAU,IACzB,IACIW,EAAM,IAGRA,EADqB,QAApB,EAAKlB,MAAMK,KACNa,EAAI,sBAAsBN,SAASC,eAAe,aAAaC,MAE/DI,EAAI,wBAAwBN,SAASC,eAAe,aAAaC,MAoBzE,IAAIK,EAAW,CACfA,KAAgB,CAAE,MAAS,CAAE,WAAc,EAAG,gBAAmB,IAAK,SAAY,GAAK,SAAY,KAAM,SAAY,CAAE,CAAE,KAAQ,qBAAsB,UAAa,CAAE,MAAS,EAAG,MAAS,WAAa,UAAa,OAAS,MAAS,GAAK,CAAE,KAAQ,yCAA0C,UAAa,CAAE,MAAS,EAAG,MAAS,WAAa,UAAa,QAAU,MAAS,IAAO,SAAY,CAAE,CAAE,KAAQ,WAAY,KAAQ,iBAAkB,UAAa,CAAE,MAAS,EAAG,MAAS,WAAa,UAAa,QAAU,MAAS,EAAG,WAAc,SAAY,CAAE,KAAQ,SAAU,KAAQ,SAAU,UAAa,CAAE,MAAS,EAAG,MAAS,WAAa,UAAa,QAAU,MAAS,EAAG,WAAc,YAC5qB,EAAKV,oBAAoBU,EAAST,MAClC,EAAKK,SAAS,CAACT,gBAAgBX,KAAKC,UAAUuB,EAAST,KAAKU,a,EAM9DC,uBAAyB,WACvB,EAAKN,SAAS,CAACR,WAAU,IACzB,IACIW,EAAM,IAERA,EADqB,QAApB,EAAKlB,MAAMK,KACNa,EAAI,oBAAoBN,SAASC,eAAe,aAAaC,MAE7DI,EAAI,uBAAuBN,SAASC,eAAe,aAAaC,MAUzE,IAAIK,EAAW,CACdA,KAAgB,CAAE,MAAS,CAAE,WAAc,EAAG,gBAAmB,IAAK,SAAY,GAAK,SAAY,KAAM,SAAY,CAAE,CAAE,KAAQ,qBAAsB,UAAa,OAAS,QAAW,CAAE,QAAW,QAAU,IAAO,QAAU,KAAQ,QAAU,QAAW,QAAU,MAAS,SAAY,MAAS,GAAK,CAAE,KAAQ,yCAA0C,UAAa,QAAU,QAAW,CAAE,QAAW,QAAU,IAAO,QAAU,KAAQ,OAAS,QAAW,QAAU,MAAS,SAAY,MAAS,IAAO,SAAY,CAAE,CAAE,KAAQ,WAAY,KAAQ,iBAAkB,UAAa,QAAU,QAAW,CAAE,QAAW,QAAU,IAAO,QAAU,KAAQ,QAAU,QAAW,QAAU,MAAS,SAAY,MAAS,EAAG,WAAc,SAAY,CAAE,KAAQ,SAAU,KAAQ,SAAU,UAAa,QAAU,QAAW,CAAE,QAAW,EAAG,IAAO,EAAG,KAAQ,EAAG,QAAW,EAAG,MAAS,GAAK,MAAS,EAAG,WAAc,YAEh4B,EAAKV,oBAAoBU,EAAST,MAClC,EAAKK,SAAS,CAACT,gBAAgB,cAAC,EAAD,CAAcf,SAAU4B,EAAST,KAAKU,c,uDAKvE,WACER,SAASU,MAAQ,uB,oBAGnB,WACE,OACE,sBAAKlC,UAAU,MAAf,UACA,wBAAQA,UAAU,eAAemC,QAASlC,KAAKsB,eAA/C,kBACE,wBAAQvB,UAAU,eAAgBmC,QAASlC,KAAK2B,cAAhD,iBACA,uBAAK,uBACJ3B,KAAKW,MAAMC,UACZ,uBACA,wBAAQb,UAAU,cAAcmC,QAASlC,KAAK4B,yBAA9C,+BACA,wBAAQ7B,UAAU,cAAcmC,QAASlC,KAAKgC,uBAA9C,6BACC,uBACChC,KAAKmB,SACN,uBACCnB,KAAKW,MAAMM,uB,GA3HHT,IAAMC,YCKT0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvB,SAASC,eAAe,SAM1BW,K","file":"static/js/main.00c107db.chunk.js","sourcesContent":["import React from 'react';\nimport './bootstrap.min.css';\n\nclass EmotionTable extends React.Component {\n    render() {\n      return (  \n        <div>\n          {/*You can remove this line and the line below. */}\n          {/*JSON.stringify(this.props.emotions)*/}\n          <table className=\"table table-bordered\">\n            <tbody>\n            {\n            this.props.emotions.map((item, index) => {\n                return(\n                <tr>\n                <td>{JSON.stringify({item})}</td>\n                <td>{JSON.stringify({index})}</td>\n                </tr>); \n            })\n            }\n            </tbody>\n          </table>\n          </div>\n          );\n        }\n    \n}\nexport default EmotionTable;\n","import './bootstrap.min.css';\nimport './App.css';\nimport EmotionTable from './EmotionTable.js';\nimport React from 'react';\nimport axios from 'axios';\n\n\nclass App extends React.Component {\n  state = {innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\n            mode: \"text\",\n          sentimentOutput:[],\n          sentiment:true,\n          logvalue:\"\"\n        }\n\n\n  setLogReturnedValue = (data) =>{\n      this.logvalue = JSON.stringify(data, null, 2) ;\n    } \n  \n  renderTextArea = ()=>{\n    document.getElementById(\"textinput\").value = \"\";\n    if(this.state.mode === \"url\") {\n      this.setState({innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\n      mode: \"text\",\n      sentimentOutput:[],\n      sentiment:true\n    })\n    } \n  }\n\n  renderTextBox = ()=>{\n    document.getElementById(\"textinput\").value = \"\";\n    if(this.state.mode === \"text\") {\n      this.setState({innercomp:<textarea rows=\"1\" cols=\"50\" id=\"textinput\"/>,\n      mode: \"url\",\n      sentimentOutput:[],\n      sentiment:true\n    })\n    }\n  }\n\n/* EMOTIONNAL RESPONSE\n{ \"usage\": { \"text_units\": 1, \"text_characters\": 269, \"features\": 2 }, \"language\": \"en\", \"keywords\": [ { \"text\": \"one-year bishopric\", \"relevance\": 0.88081, \"emotion\": { \"sadness\": 0.140558, \"joy\": 0.391637, \"fear\": 0.067993, \"disgust\": 0.058289, \"anger\": 0.063817 }, \"count\": 1 }, { \"text\": \"Ecumenical Patriarch of Constantinople\", \"relevance\": 0.736151, \"emotion\": { \"sadness\": 0.125756, \"joy\": 0.193152, \"fear\": 0.06582, \"disgust\": 0.053097, \"anger\": 0.072421 }, \"count\": 1 } ], \"entities\": [ { \"type\": \"Location\", \"text\": \"Constantinople\", \"relevance\": 0.970822, \"emotion\": { \"sadness\": 0.106033, \"joy\": 0.363353, \"fear\": 0.051369, \"disgust\": 0.044808, \"anger\": 0.062089 }, \"count\": 3, \"confidence\": 0.988081 }, { \"type\": \"Person\", \"text\": \"George\", \"relevance\": 0.674048, \"emotion\": { \"sadness\": 0, \"joy\": 0, \"fear\": 0, \"disgust\": 0, \"anger\": 0 }, \"count\": 1, \"confidence\": 0.993361 } ] }\n*/\n\n/* SENTIMENTAL RESPONSE\n{ \"usage\": { \"text_units\": 1, \"text_characters\": 269, \"features\": 2 }, \"language\": \"en\", \"keywords\": [ { \"text\": \"one-year bishopric\", \"sentiment\": { \"score\": 0, \"label\": \"neutral\" }, \"relevance\": 0.88081, \"count\": 1 }, { \"text\": \"Ecumenical Patriarch of Constantinople\", \"sentiment\": { \"score\": 0, \"label\": \"neutral\" }, \"relevance\": 0.736151, \"count\": 1 } ], \"entities\": [ { \"type\": \"Location\", \"text\": \"Constantinople\", \"sentiment\": { \"score\": 0, \"label\": \"neutral\" }, \"relevance\": 0.970822, \"count\": 3, \"confidence\": 0.988081 }, { \"type\": \"Person\", \"text\": \"George\", \"sentiment\": { \"score\": 0, \"label\": \"neutral\" }, \"relevance\": 0.674048, \"count\": 1, \"confidence\": 0.993361 } ] }\n*/\n\n  sendForSentimentAnalysis = () => {\n    this.setState({sentiment:true});\n    let ret = \"\";\n    let url = \".\";\n\n    if(this.state.mode === \"url\") {\n      url = url+\"/url/sentiment?url=\"+document.getElementById(\"textinput\").value;\n    } else {\n      url = url+\"/text/sentiment?text=\"+document.getElementById(\"textinput\").value;\n    }\n    /*\n    ret = axios.get(url);\n    ret.then((response)=>{\n\n      //Include code here to check the sentiment and fomrat the data accordingly\n\n      this.setState({sentimentOutput:response.data});\n      this.setLogReturnedValue(response.data);\n      let output = response.data;\n      //if(response.data === \"positive\") {\n       // output = <div style={{color:\"green\",fontSize:20}}>{response.data}</div>\n      //} else if (response.data === \"negative\"){\n       // output = <div style={{color:\"red\",fontSize:20}}>{response.data}</div>\n      //} else {\n       // output = <div style={{color:\"orange\",fontSize:20}}>{response.data}</div>\n      //}\n    */\n   // MOCK\n    var response = {};\n    response.data = { \"usage\": { \"text_units\": 1, \"text_characters\": 269, \"features\": 2 }, \"language\": \"en\", \"keywords\": [ { \"text\": \"one-year bishopric\", \"sentiment\": { \"score\": 0, \"label\": \"neutral\" }, \"relevance\": 0.88081, \"count\": 1 }, { \"text\": \"Ecumenical Patriarch of Constantinople\", \"sentiment\": { \"score\": 0, \"label\": \"neutral\" }, \"relevance\": 0.736151, \"count\": 1 } ], \"entities\": [ { \"type\": \"Location\", \"text\": \"Constantinople\", \"sentiment\": { \"score\": 0, \"label\": \"neutral\" }, \"relevance\": 0.970822, \"count\": 3, \"confidence\": 0.988081 }, { \"type\": \"Person\", \"text\": \"George\", \"sentiment\": { \"score\": 0, \"label\": \"neutral\" }, \"relevance\": 0.674048, \"count\": 1, \"confidence\": 0.993361 } ] };\n    this.setLogReturnedValue(response.data);\n    this.setState({sentimentOutput:JSON.stringify(response.data.keywords)});\n    // END MOCK\n    /*this.setState({sentimentOutput:output});\n    });*/\n  }\n\n  sendForEmotionAnalysis = () => {\n    this.setState({sentiment:false});\n    let ret = \"\";\n    let url = \".\";\n    if(this.state.mode === \"url\") {\n      url = url+\"/url/emotion?url=\"+document.getElementById(\"textinput\").value;\n    } else {\n      url = url+\"/text/emotion/?text=\"+document.getElementById(\"textinput\").value;\n    }\n    /*\n    ret = axios.get(url);\n\n    ret.then((response)=>{\n      this.setLogReturnedValue(response.data);\n      this.setState({sentimentOutput:<EmotionTable emotions={response.data}/>});\n  });*/\n   // MOCK\n   var response = {};\n    response.data = { \"usage\": { \"text_units\": 1, \"text_characters\": 269, \"features\": 2 }, \"language\": \"en\", \"keywords\": [ { \"text\": \"one-year bishopric\", \"relevance\": 0.88081, \"emotion\": { \"sadness\": 0.140558, \"joy\": 0.391637, \"fear\": 0.067993, \"disgust\": 0.058289, \"anger\": 0.063817 }, \"count\": 1 }, { \"text\": \"Ecumenical Patriarch of Constantinople\", \"relevance\": 0.736151, \"emotion\": { \"sadness\": 0.125756, \"joy\": 0.193152, \"fear\": 0.06582, \"disgust\": 0.053097, \"anger\": 0.072421 }, \"count\": 1 } ], \"entities\": [ { \"type\": \"Location\", \"text\": \"Constantinople\", \"relevance\": 0.970822, \"emotion\": { \"sadness\": 0.106033, \"joy\": 0.363353, \"fear\": 0.051369, \"disgust\": 0.044808, \"anger\": 0.062089 }, \"count\": 3, \"confidence\": 0.988081 }, { \"type\": \"Person\", \"text\": \"George\", \"relevance\": 0.674048, \"emotion\": { \"sadness\": 0, \"joy\": 0, \"fear\": 0, \"disgust\": 0, \"anger\": 0 }, \"count\": 1, \"confidence\": 0.993361 } ] };\n    \n    this.setLogReturnedValue(response.data);\n    this.setState({sentimentOutput:<EmotionTable emotions={response.data.keywords}/>});\n  // END MOCK\n   \n  }\n  \n  componentDidMount(){\n    document.title = \"Sentiment Analyzer\"\n  }\n\n  render() {\n    return (  \n      <div className=\"App\">\n      <button className=\"btn btn-info\" onClick={this.renderTextArea}>Text</button>\n        <button className=\"btn btn-dark\"  onClick={this.renderTextBox}>URL</button>\n        <br/><br/>\n        {this.state.innercomp}\n        <br/>\n        <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\n        <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\n         <br/>\n         {this.logvalue}\n         <br/>\n         {this.state.sentimentOutput}\n      </div>\n      );\n    }\n}\n//<br/>\n//            {this.state.sentimentOutput}\n//        <br/>\n//            {this.logvalue}\n//        <br/>\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}