{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","className","this","props","emotions","map","classItem","classIndex","item","index","JSON","stringify","type","text","emotion","sadness","joy","fear","disgust","anger","relevance","React","Component","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","logvalue","setLogReturnedValue","data","setState","renderTextArea","document","getElementById","value","renderTextBox","sendForSentimentAnalysis","url","axios","get","then","response","outputArray","keywords","concat","entities","label","style","color","fontSize","sendForEmotionAnalysis","concatenatedDatas","title","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ebeeeb53.chunk.js","sourcesContent":["import React from 'react';\nimport './bootstrap.min.css';\n\nclass EmotionTable extends React.Component {\n    render() {\n      return (  \n        <div>\n          {/*You can remove this line and the line below. */}\n          {/*JSON.stringify(this.props.emotions)*/}\n          <table className=\"table table-bordered\">\n            <thead>\n            <tr>\n                <th>type</th>\n                <th>text</th>\n                <th>sadness</th>\n                <th>joy</th>\n                <th>fear</th>\n                <th>disgust</th>\n                <th>anger</th>\n                <th>relevance</th>\n            </tr>\n            </thead>\n            <tbody>\n            {\n            this.props.emotions.map((classItem, classIndex) => {\n            return(\n            classItem.map((item, index) => {\n                return(\n                <tr>\n                    <td>{JSON.stringify(item.type)}</td>\n                    <td>{JSON.stringify(item.text)}</td>\n                    <td>{JSON.stringify(item.emotion.sadness)}</td>\n                    <td>{JSON.stringify(item.emotion.joy)}</td>\n                    <td>{JSON.stringify(item.emotion.fear)}</td>\n                    <td>{JSON.stringify(item.emotion.disgust)}</td>\n                    <td>{JSON.stringify(item.emotion.anger)}</td>\n                    <td>{JSON.stringify(item.relevance)}</td>\n                </tr>\n                ); \n            }))\n            })\n            }\n            </tbody>\n          </table>\n          </div>\n          );\n        }\n    \n}\nexport default EmotionTable;","import './bootstrap.min.css';\nimport './App.css';\nimport EmotionTable from './EmotionTable.js';\nimport React from 'react';\nimport axios from 'axios';\n\nclass App extends React.Component {\n  state = {innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\n            mode: \"text\",\n          sentimentOutput:[],\n          sentiment:true,\n          logvalue:[],\n        }\n\n\n  setLogReturnedValue = (data) =>{\n      this.setState({\n                  logvalue: JSON.stringify(data, null, 2)\n              });\n    } \n  \n  renderTextArea = ()=>{\n    document.getElementById(\"textinput\").value = \"\";\n    if(this.state.mode === \"url\") {\n      this.setState({innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\n      mode: \"text\",\n      sentimentOutput:[],\n      sentiment:true\n    })\n    } \n  }\n\n  renderTextBox = ()=>{\n    document.getElementById(\"textinput\").value = \"\";\n    if(this.state.mode === \"text\") {\n      this.setState({innercomp:<textarea rows=\"1\" cols=\"50\" id=\"textinput\"/>,\n      mode: \"url\",\n      sentimentOutput:[],\n      sentiment:true\n    })\n    }\n  }\n\n/* EMOTIONNAL RESPONSE\n{ \"usage\": { \"text_units\": 1, \"text_characters\": 269, \"features\": 2 }, \"language\": \"en\", \"keywords\": [ { \"text\": \"one-year bishopric\", \"relevance\": 0.88081, \"emotion\": { \"sadness\": 0.140558, \"joy\": 0.391637, \"fear\": 0.067993, \"disgust\": 0.058289, \"anger\": 0.063817 }, \"count\": 1 }, { \"text\": \"Ecumenical Patriarch of Constantinople\", \"relevance\": 0.736151, \"emotion\": { \"sadness\": 0.125756, \"joy\": 0.193152, \"fear\": 0.06582, \"disgust\": 0.053097, \"anger\": 0.072421 }, \"count\": 1 } ], \"entities\": [ { \"type\": \"Location\", \"text\": \"Constantinople\", \"relevance\": 0.970822, \"emotion\": { \"sadness\": 0.106033, \"joy\": 0.363353, \"fear\": 0.051369, \"disgust\": 0.044808, \"anger\": 0.062089 }, \"count\": 3, \"confidence\": 0.988081 }, { \"type\": \"Person\", \"text\": \"George\", \"relevance\": 0.674048, \"emotion\": { \"sadness\": 0, \"joy\": 0, \"fear\": 0, \"disgust\": 0, \"anger\": 0 }, \"count\": 1, \"confidence\": 0.993361 } ] }\n*/\n\n/* SENTIMENTAL RESPONSE\n{ \"usage\": { \"text_units\": 1, \"text_characters\": 269, \"features\": 2 }, \"language\": \"en\", \"keywords\": [ { \"text\": \"one-year bishopric\", \"sentiment\": { \"score\": 0, \"label\": \"neutral\" }, \"relevance\": 0.88081, \"count\": 1 }, { \"text\": \"Ecumenical Patriarch of Constantinople\", \"sentiment\": { \"score\": 0, \"label\": \"neutral\" }, \"relevance\": 0.736151, \"count\": 1 } ], \"entities\": [ { \"type\": \"Location\", \"text\": \"Constantinople\", \"sentiment\": { \"score\": 0, \"label\": \"neutral\" }, \"relevance\": 0.970822, \"count\": 3, \"confidence\": 0.988081 }, { \"type\": \"Person\", \"text\": \"George\", \"sentiment\": { \"score\": 0, \"label\": \"neutral\" }, \"relevance\": 0.674048, \"count\": 1, \"confidence\": 0.993361 } ] }\n{\n  \"usage\": {\n    \"text_units\": 1,\n    \"text_characters\": 6837,\n    \"features\": 2\n  },\n  \"retrieved_url\": \"https://en.wikipedia.org/wiki/George_I_of_Constantinople\",\n  \"language\": \"en\",\n  \"keywords\": [\n    {\n      \"text\": \"Terms of Use\",\n      \"relevance\": 0.659964,\n      \"emotion\": {\n        \"sadness\": 0.107056,\n        \"joy\": 0.162192,\n        \"fear\": 0.030613,\n        \"disgust\": 0.149681,\n        \"anger\": 0.049642\n      },\n      \"count\": 1\n    },\n    {\n      \"text\": \"Byzantine period\",\n      \"relevance\": 0.592172,\n      \"emotion\": {\n        \"sadness\": 0.135427,\n        \"joy\": 0.032726,\n        \"fear\": 0.31763,\n        \"disgust\": 0.087577,\n        \"anger\": 0.065639\n      },\n      \"count\": 1\n    }\n  ],\n  \"entities\": [\n    {\n      \"type\": \"Location\",\n      \"text\": \"Constantinople\",\n      \"relevance\": 0.950869,\n      \"emotion\": {\n        \"sadness\": 0.069825,\n        \"joy\": 0.414539,\n        \"fear\": 0.022974,\n        \"disgust\": 0.068648,\n        \"anger\": 0.092213\n      },\n      \"count\": 17,\n      \"confidence\": 1\n    },\n    {\n      \"type\": \"Person\",\n      \"text\": \"George\",\n      \"relevance\": 0.306308,\n      \"emotion\": {\n        \"sadness\": 0.317465,\n        \"joy\": 0.078998,\n        \"fear\": 0.235657,\n        \"disgust\": 0.21406,\n        \"anger\": 0.119763\n      },\n      \"count\": 6,\n      \"confidence\": 1\n    }\n  ]\n}\n*/\n\n  sendForSentimentAnalysis = () => {\n    this.setState({sentiment:true});\n    let ret = \"\";\n    let url = \".\";\n\n    if(this.state.mode === \"url\") {\n    // send GET URL -> \"url\" field\n      url = url+\"/url/sentiment?url=\"+document.getElementById(\"textinput\").value;\n    } else {\n    // send GET TEXT -> \"text\" field\n      url = url+\"/text/sentiment?text=\"+document.getElementById(\"textinput\").value;\n    }\n\n    ret = axios.get(url);\n    ret.then((response)=>{\n        // MOCK\n        // var response = {};\n        // response.data = { \"usage\": { \"text_units\": 1, \"text_characters\": 269, \"features\": 2 }, \"language\": \"en\", \"keywords\": [ { \"text\": \"one-year bishopric\", \"sentiment\": { \"score\": 0, \"label\": \"neutral\" }, \"relevance\": 0.88081, \"count\": 1 }, { \"text\": \"Ecumenical Patriarch of Constantinople\", \"sentiment\": { \"score\": 0, \"label\": \"neutral\" }, \"relevance\": 0.736151, \"count\": 1 } ], \"entities\": [ { \"type\": \"Location\", \"text\": \"Constantinople\", \"sentiment\": { \"score\": 0, \"label\": \"neutral\" }, \"relevance\": 0.970822, \"count\": 3, \"confidence\": 0.988081 }, { \"type\": \"Person\", \"text\": \"George\", \"sentiment\": { \"score\": 0, \"label\": \"neutral\" }, \"relevance\": 0.674048, \"count\": 1, \"confidence\": 0.993361 } ] };\n        // END MOCK\n        let outputArray = response.data.keywords.concat(response.data.entities);\n        this.setState({sentimentOutput: <div></div>});\n        this.setLogReturnedValue(response.data);\n        outputArray.map((item, index) => { //convert\n            if(item.sentiment.label === \"positive\") {\n            return(this.setState({sentimentOutput: <div>{this.state.sentimentOutput} <div style={{color:\"green\",fontSize:20}}>{item.text}</div></div>}));\n            } else if (item.sentiment.label === \"negative\"){\n               return(this.setState({sentimentOutput: <div>{this.state.sentimentOutput} <div style={{color:\"red\",fontSize:20}}>{item.text}</div></div>}));\n            } else {\n               return(this.setState({sentimentOutput: <div>{this.state.sentimentOutput} <div style={{color:\"orange\",fontSize:20}}>{item.text}</div></div>}));\n            }          \n            });\n        //this.setState({sentimentOutput:<SentimentList sentiments={null} />});\n        //this.setState({sentimentOutput:<SentimentList sentiments={resultsArray}/>});\n        });\n  }\n\n  sendForEmotionAnalysis = () => {\n    this.setState({sentiment:false});\n    let ret = \"\";\n    let url = \".\";\n    if(this.state.mode === \"url\") {\n      url = url+\"/url/emotion?url=\"+document.getElementById(\"textinput\").value;\n    } else {\n      url = url+\"/text/emotion/?text=\"+document.getElementById(\"textinput\").value;\n    }\n\n    ret = axios.get(url);\n\n    ret.then((response)=>{\n        // MOCK\n        //var response = {};\n        //response.data = { \"usage\": { \"text_units\": 1, \"text_characters\": 269, \"features\": 2 }, \"language\": \"en\", \"keywords\": [ { \"text\": \"one-year bishopric\", \"relevance\": 0.88081, \"emotion\": { \"sadness\": 0.140558, \"joy\": 0.391637, \"fear\": 0.067993, \"disgust\": 0.058289, \"anger\": 0.063817 }, \"count\": 1 }, { \"text\": \"Ecumenical Patriarch of Constantinople\", \"relevance\": 0.736151, \"emotion\": { \"sadness\": 0.125756, \"joy\": 0.193152, \"fear\": 0.06582, \"disgust\": 0.053097, \"anger\": 0.072421 }, \"count\": 1 } ], \"entities\": [ { \"type\": \"Location\", \"text\": \"Constantinople\", \"relevance\": 0.970822, \"emotion\": { \"sadness\": 0.106033, \"joy\": 0.363353, \"fear\": 0.051369, \"disgust\": 0.044808, \"anger\": 0.062089 }, \"count\": 3, \"confidence\": 0.988081 }, { \"type\": \"Person\", \"text\": \"George\", \"relevance\": 0.674048, \"emotion\": { \"sadness\": 0, \"joy\": 0, \"fear\": 0, \"disgust\": 0, \"anger\": 0 }, \"count\": 1, \"confidence\": 0.993361 } ] };\n        // END MOCK \n        this.setLogReturnedValue(response.data);\n        let concatenatedDatas = [response.data.keywords, response.data.entities];\n        this.setState({sentimentOutput:<EmotionTable emotions={concatenatedDatas}/>});\n    });\n  }\n  \n  componentDidMount(){\n    document.title = \"Sentiment Analyzer\"\n  }\n\n  render() {\n    return (  \n      <div className=\"App\">\n      <button className=\"btn btn-info\" onClick={this.renderTextArea}>Text</button>\n        <button className=\"btn btn-dark\"  onClick={this.renderTextBox}>URL</button>\n        <br/><br/>\n        {this.state.innercomp}\n        <br/>\n        <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\n        <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\n         <br/><br/>\n         <h2>\"DEBUG : last response (buffered) from Watson with NODE by JSON over HTTP\"</h2>\n         <br/>{this.state.logvalue}\n         <br/><br/>\n         <h2>\"OUTPUT : response from Watson with REAL\"</h2> \n         <div id=\"output\"></div>\n         <br/>{this.state.sentimentOutput}   \n      </div>\n      );\n    }\n}//\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}