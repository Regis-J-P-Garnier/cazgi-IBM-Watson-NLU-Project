{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","className","this","props","emotions","map","item","index","JSON","stringify","type","text","emotion","sadness","joy","fear","disgust","anger","relevance","React","Component","SentimentList","sentiments","ConcatenateTables","components","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentimentPersonsOutput","sentiment","logvalue","setLogReturnedValue","data","renderTextArea","document","getElementById","value","setState","renderTextBox","sendForSentimentAnalysis","url","response","outputArray","keywords","concat","entities","outputString","outputStringsArray","label","style","color","fontSize","sendForEmotionAnalysis","title","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"qQAgDeA,E,4JA5CX,WACE,OACE,8BAGE,wBAAOC,UAAU,uBAAjB,UACE,gCACA,+BACI,uCACA,sCACA,sCACA,yCACA,qCACA,sCACA,yCACA,uCACA,gDAGJ,gCAEAC,KAAKC,MAAMC,SAASC,KAAI,SAACC,EAAMC,GAC3B,OACA,+BACI,6BAAKC,KAAKC,UAAUF,KACpB,6BAAKC,KAAKC,UAAUH,EAAKI,QACzB,6BAAKF,KAAKC,UAAUH,EAAKK,QACzB,6BAAKH,KAAKC,UAAUH,EAAKM,QAAQC,WACjC,6BAAKL,KAAKC,UAAUH,EAAKM,QAAQE,OACjC,6BAAKN,KAAKC,UAAUH,EAAKM,QAAQG,QACjC,6BAAKP,KAAKC,UAAUH,EAAKM,QAAQI,WACjC,6BAAKR,KAAKC,UAAUH,EAAKM,QAAQK,SACjC,6BAAKT,KAAKC,UAAUH,EAAKY,8B,GAjClBC,IAAMC,WCG3BC,G,kKACF,WACE,OACE,8BACInB,KAAKC,MAAMmB,WAAWjB,KAAI,SAACC,EAAMC,GAAW,OAAO,8BAAMD,a,GAJzCa,IAAMC,YAU5BG,E,4JACF,WACE,OACE,8BACIrB,KAAKC,MAAMqB,WAAWnB,KAAI,SAACC,EAAMC,GAAW,MAAO,CAACD,iB,GAJhCa,IAAMC,WAgKvBK,E,4MApJbC,MAAQ,CAACC,UAAU,0BAAUC,KAAK,IAAIC,KAAK,KAAKC,GAAG,cACzCC,KAAM,OACRC,gBAAgB,GAChBC,uBAAuB,GACvBC,WAAU,EACVC,SAAS,I,EAIjBC,oBAAsB,SAACC,GACnB,EAAKF,SAAW3B,KAAKC,UAAU4B,EAAM,KAAM,I,EAG/CC,eAAiB,WACfC,SAASC,eAAe,aAAaC,MAAQ,GACtB,QAApB,EAAKf,MAAMK,MACZ,EAAKW,SAAS,CAACf,UAAU,0BAAUC,KAAK,IAAIC,KAAK,KAAKC,GAAG,cACzDC,KAAM,OACNC,gBAAgB,GAChBE,WAAU,K,EAKdS,cAAgB,WACdJ,SAASC,eAAe,aAAaC,MAAQ,GACtB,SAApB,EAAKf,MAAMK,MACZ,EAAKW,SAAS,CAACf,UAAU,0BAAUC,KAAK,IAAIC,KAAK,KAAKC,GAAG,cACzDC,KAAM,MACNC,gBAAgB,GAChBE,WAAU,K,EAadU,yBAA2B,WACzB,EAAKF,SAAS,CAACR,WAAU,IACzB,IACIW,EAAM,IAGRA,EADqB,QAApB,EAAKnB,MAAMK,KACNc,EAAI,sBAAsBN,SAASC,eAAe,aAAaC,MAE/DI,EAAI,wBAAwBN,SAASC,eAAe,aAAaC,MAczE,IAAIK,EAAW,CACfA,KAAgB,CAAE,MAAS,CAAE,WAAc,EAAG,gBAAmB,IAAK,SAAY,GAAK,SAAY,KAAM,SAAY,CAAE,CAAE,KAAQ,qBAAsB,UAAa,CAAE,MAAS,EAAG,MAAS,WAAa,UAAa,OAAS,MAAS,GAAK,CAAE,KAAQ,yCAA0C,UAAa,CAAE,MAAS,EAAG,MAAS,WAAa,UAAa,QAAU,MAAS,IAAO,SAAY,CAAE,CAAE,KAAQ,WAAY,KAAQ,iBAAkB,UAAa,CAAE,MAAS,EAAG,MAAS,WAAa,UAAa,QAAU,MAAS,EAAG,WAAc,SAAY,CAAE,KAAQ,SAAU,KAAQ,SAAU,UAAa,CAAE,MAAS,EAAG,MAAS,WAAa,UAAa,QAAU,MAAS,EAAG,WAAc,YAExqBC,EAAcD,EAAST,KAAKW,SAASC,OAAOH,EAAST,KAAKa,UAC1DC,EAAe,GACfC,EAAqB,GACzBL,EAAY1C,KAAI,SAACC,EAAMC,GAEf4C,EADwB,aAAzB7C,EAAK4B,UAAUmB,MACC,qBAAKC,MAAO,CAACC,MAAM,QAAQC,SAAS,IAApC,SAA0ClD,EAAKK,OAC9B,aAAzBL,EAAK4B,UAAUmB,MACP,qBAAKC,MAAO,CAACC,MAAM,MAAMC,SAAS,IAAlC,SAAwClD,EAAKK,OAE7C,qBAAK2C,MAAO,CAACC,MAAM,SAASC,SAAS,IAArC,SAA2ClD,EAAKK,OAEnEyC,EAAmB7C,GAAO4C,KAE9B,EAAKf,oBAAoBU,EAAST,MAIlC,EAAKK,SAAS,CAACV,gBAAgB,cAAC,EAAD,CAAeV,WAAY8B,MAE1D,EAAKV,SAAS,CAACT,uBAAuB,M,EAIxCwB,uBAAyB,WACvB,EAAKf,SAAS,CAACR,WAAU,IACzB,IACIW,EAAM,IAERA,EADqB,QAApB,EAAKnB,MAAMK,KACNc,EAAI,oBAAoBN,SAASC,eAAe,aAAaC,MAE7DI,EAAI,uBAAuBN,SAASC,eAAe,aAAaC,MAUzE,IAAIK,EAAW,CACdA,KAAgB,CAAE,MAAS,CAAE,WAAc,EAAG,gBAAmB,IAAK,SAAY,GAAK,SAAY,KAAM,SAAY,CAAE,CAAE,KAAQ,qBAAsB,UAAa,OAAS,QAAW,CAAE,QAAW,QAAU,IAAO,QAAU,KAAQ,QAAU,QAAW,QAAU,MAAS,SAAY,MAAS,GAAK,CAAE,KAAQ,yCAA0C,UAAa,QAAU,QAAW,CAAE,QAAW,QAAU,IAAO,QAAU,KAAQ,OAAS,QAAW,QAAU,MAAS,SAAY,MAAS,IAAO,SAAY,CAAE,CAAE,KAAQ,WAAY,KAAQ,iBAAkB,UAAa,QAAU,QAAW,CAAE,QAAW,QAAU,IAAO,QAAU,KAAQ,QAAU,QAAW,QAAU,MAAS,SAAY,MAAS,EAAG,WAAc,SAAY,CAAE,KAAQ,SAAU,KAAQ,SAAU,UAAa,QAAU,QAAW,CAAE,QAAW,EAAG,IAAO,EAAG,KAAQ,EAAG,QAAW,EAAG,MAAS,GAAK,MAAS,EAAG,WAAc,YAEh4B,EAAKV,oBAAoBU,EAAST,MAClC,EAAKK,SAAS,CAACV,gBAAgB,cAAC,EAAD,CAAc5B,SAAU0C,EAAST,KAAKW,aACrE,EAAKN,SAAS,CAACT,uBAAuB,cAAC,EAAD,CAAc7B,SAAU0C,EAAST,KAAKa,aAC5E,EAAKR,SAAS,CAACV,gBAAgB,cAAC,EAAD,CAAmBR,WAAY,CAAC,EAAKE,MAAMM,gBAAgB,EAAKN,MAAMO,6B,uDAKvG,WACEM,SAASmB,MAAQ,uB,oBAGnB,WACE,OACE,sBAAKzD,UAAU,MAAf,UACA,wBAAQA,UAAU,eAAe0D,QAASzD,KAAKoC,eAA/C,kBACE,wBAAQrC,UAAU,eAAgB0D,QAASzD,KAAKyC,cAAhD,iBACA,uBAAK,uBACJzC,KAAKwB,MAAMC,UACZ,uBACA,wBAAQ1B,UAAU,cAAc0D,QAASzD,KAAK0C,yBAA9C,+BACA,wBAAQ3C,UAAU,cAAc0D,QAASzD,KAAKuD,uBAA9C,6BACC,uBACA,4FACCvD,KAAKiC,SACN,uBACA,2EACCjC,KAAKwB,MAAMM,uB,GA3IHb,IAAMC,WCfTwC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhC,SAASC,eAAe,SAM1BoB,K","file":"static/js/main.c32fe939.chunk.js","sourcesContent":["import React from 'react';\nimport './bootstrap.min.css';\n\nclass EmotionTable extends React.Component {\n    render() {\n      return (  \n        <div>\n          {/*You can remove this line and the line below. */}\n          {/*JSON.stringify(this.props.emotions)*/}\n          <table className=\"table table-bordered\">\n            <thead>\n            <tr>\n                <th>index</th>\n                <th>type</th>\n                <th>text</th>\n                <th>sadness</th>\n                <th>joy</th>\n                <th>fear</th>\n                <th>disgust</th>\n                <th>anger</th>\n                <th>relevance</th>\n            </tr>\n            </thead>\n            <tbody>\n            {\n            this.props.emotions.map((item, index) => {\n                return(\n                <tr>\n                    <td>{JSON.stringify(index)}</td>\n                    <td>{JSON.stringify(item.type)}</td>\n                    <td>{JSON.stringify(item.text)}</td>\n                    <td>{JSON.stringify(item.emotion.sadness)}</td>\n                    <td>{JSON.stringify(item.emotion.joy)}</td>\n                    <td>{JSON.stringify(item.emotion.fear)}</td>\n                    <td>{JSON.stringify(item.emotion.disgust)}</td>\n                    <td>{JSON.stringify(item.emotion.anger)}</td>\n                    <td>{JSON.stringify(item.relevance)}</td>\n                </tr>\n                ); \n            })\n            }\n            </tbody>\n          </table>\n          </div>\n          );\n        }\n    \n}\nexport default EmotionTable;","import './bootstrap.min.css';\nimport './App.css';\nimport EmotionTable from './EmotionTable.js';\nimport React from 'react';\nimport axios from 'axios';\n\nclass SentimentList extends React.Component { // need upgrade and specialization\n    render() {\n      return ( \n        <div>{\n            this.props.sentiments.map((item, index) => {return(<div>{item}</div>)})\n        }</div>\n        );\n    };\n};\n\nclass ConcatenateTables extends React.Component { // need upgrade and specialization\n    render() {\n      return ( \n        <div>{\n            this.props.components.map((item, index) => {return({item})})      \n        }\n        </div>\n        );\n    }\n};\n\nclass App extends React.Component {\n  state = {innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\n            mode: \"text\",\n          sentimentOutput:[],\n          sentimentPersonsOutput:[],\n          sentiment:true,\n          logvalue:\"\"\n        }\n\n\n  setLogReturnedValue = (data) =>{\n      this.logvalue = JSON.stringify(data, null, 2) ;\n    } \n  \n  renderTextArea = ()=>{\n    document.getElementById(\"textinput\").value = \"\";\n    if(this.state.mode === \"url\") {\n      this.setState({innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\n      mode: \"text\",\n      sentimentOutput:[],\n      sentiment:true\n    })\n    } \n  }\n\n  renderTextBox = ()=>{\n    document.getElementById(\"textinput\").value = \"\";\n    if(this.state.mode === \"text\") {\n      this.setState({innercomp:<textarea rows=\"1\" cols=\"50\" id=\"textinput\"/>,\n      mode: \"url\",\n      sentimentOutput:[],\n      sentiment:true\n    })\n    }\n  }\n\n/* EMOTIONNAL RESPONSE\n{ \"usage\": { \"text_units\": 1, \"text_characters\": 269, \"features\": 2 }, \"language\": \"en\", \"keywords\": [ { \"text\": \"one-year bishopric\", \"relevance\": 0.88081, \"emotion\": { \"sadness\": 0.140558, \"joy\": 0.391637, \"fear\": 0.067993, \"disgust\": 0.058289, \"anger\": 0.063817 }, \"count\": 1 }, { \"text\": \"Ecumenical Patriarch of Constantinople\", \"relevance\": 0.736151, \"emotion\": { \"sadness\": 0.125756, \"joy\": 0.193152, \"fear\": 0.06582, \"disgust\": 0.053097, \"anger\": 0.072421 }, \"count\": 1 } ], \"entities\": [ { \"type\": \"Location\", \"text\": \"Constantinople\", \"relevance\": 0.970822, \"emotion\": { \"sadness\": 0.106033, \"joy\": 0.363353, \"fear\": 0.051369, \"disgust\": 0.044808, \"anger\": 0.062089 }, \"count\": 3, \"confidence\": 0.988081 }, { \"type\": \"Person\", \"text\": \"George\", \"relevance\": 0.674048, \"emotion\": { \"sadness\": 0, \"joy\": 0, \"fear\": 0, \"disgust\": 0, \"anger\": 0 }, \"count\": 1, \"confidence\": 0.993361 } ] }\n*/\n\n/* SENTIMENTAL RESPONSE\n{ \"usage\": { \"text_units\": 1, \"text_characters\": 269, \"features\": 2 }, \"language\": \"en\", \"keywords\": [ { \"text\": \"one-year bishopric\", \"sentiment\": { \"score\": 0, \"label\": \"neutral\" }, \"relevance\": 0.88081, \"count\": 1 }, { \"text\": \"Ecumenical Patriarch of Constantinople\", \"sentiment\": { \"score\": 0, \"label\": \"neutral\" }, \"relevance\": 0.736151, \"count\": 1 } ], \"entities\": [ { \"type\": \"Location\", \"text\": \"Constantinople\", \"sentiment\": { \"score\": 0, \"label\": \"neutral\" }, \"relevance\": 0.970822, \"count\": 3, \"confidence\": 0.988081 }, { \"type\": \"Person\", \"text\": \"George\", \"sentiment\": { \"score\": 0, \"label\": \"neutral\" }, \"relevance\": 0.674048, \"count\": 1, \"confidence\": 0.993361 } ] }\n*/\n\n  sendForSentimentAnalysis = () => {\n    this.setState({sentiment:true});\n    let ret = \"\";\n    let url = \".\";\n\n    if(this.state.mode === \"url\") {\n      url = url+\"/url/sentiment?url=\"+document.getElementById(\"textinput\").value;\n    } else {\n      url = url+\"/text/sentiment?text=\"+document.getElementById(\"textinput\").value;\n    }\n    /*\n    ret = axios.get(url);\n    ret.then((response)=>{\n\n      //Include code here to check the sentiment and fomrat the data accordingly\n\n      this.setState({sentimentOutput:response.data});\n      this.setLogReturnedValue(response.data);\n      let output = response.data;\n    */\n   // MOCK\n\n    var response = {};\n    response.data = { \"usage\": { \"text_units\": 1, \"text_characters\": 269, \"features\": 2 }, \"language\": \"en\", \"keywords\": [ { \"text\": \"one-year bishopric\", \"sentiment\": { \"score\": 0, \"label\": \"neutral\" }, \"relevance\": 0.88081, \"count\": 1 }, { \"text\": \"Ecumenical Patriarch of Constantinople\", \"sentiment\": { \"score\": 0, \"label\": \"neutral\" }, \"relevance\": 0.736151, \"count\": 1 } ], \"entities\": [ { \"type\": \"Location\", \"text\": \"Constantinople\", \"sentiment\": { \"score\": 0, \"label\": \"neutral\" }, \"relevance\": 0.970822, \"count\": 3, \"confidence\": 0.988081 }, { \"type\": \"Person\", \"text\": \"George\", \"sentiment\": { \"score\": 0, \"label\": \"neutral\" }, \"relevance\": 0.674048, \"count\": 1, \"confidence\": 0.993361 } ] };\n    \n    let outputArray = response.data.keywords.concat(response.data.entities);\n    let outputString = '';\n    let outputStringsArray = [];\n    outputArray.map((item, index) => {\n        if(item.sentiment.label === \"positive\") {\n            outputString = <div style={{color:\"green\",fontSize:20}}>{item.text}</div>\n        } else if (item.sentiment.label === \"negative\"){\n            outputString = <div style={{color:\"red\",fontSize:20}}>{item.text}</div>\n        } else {\n            outputString = <div style={{color:\"orange\",fontSize:20}}>{item.text}</div>\n        }\n        outputStringsArray[index]=outputString\n    });\n    this.setLogReturnedValue(response.data);\n    //this.setState({sentimentOutput:JSON.stringify(response.data.keywords[0])});\n    //this.setState({sentimentPersonsOutput:JSON.stringify(response.data.entities[0])});\n    // END MOCK\n    this.setState({sentimentOutput:<SentimentList sentiments={outputStringsArray}/>});\n    //this.setState({sentimentOutput:outputStringsArray});\n    this.setState({sentimentPersonsOutput:\"\"});\n    //});*/\n  }\n\n  sendForEmotionAnalysis = () => {\n    this.setState({sentiment:false});\n    let ret = \"\";\n    let url = \".\";\n    if(this.state.mode === \"url\") {\n      url = url+\"/url/emotion?url=\"+document.getElementById(\"textinput\").value;\n    } else {\n      url = url+\"/text/emotion/?text=\"+document.getElementById(\"textinput\").value;\n    }\n    /*\n    ret = axios.get(url);\n\n    ret.then((response)=>{\n      this.setLogReturnedValue(response.data);\n      this.setState({sentimentOutput:<EmotionTable emotions={response.data}/>});\n  });*/\n   // MOCK\n   var response = {};\n    response.data = { \"usage\": { \"text_units\": 1, \"text_characters\": 269, \"features\": 2 }, \"language\": \"en\", \"keywords\": [ { \"text\": \"one-year bishopric\", \"relevance\": 0.88081, \"emotion\": { \"sadness\": 0.140558, \"joy\": 0.391637, \"fear\": 0.067993, \"disgust\": 0.058289, \"anger\": 0.063817 }, \"count\": 1 }, { \"text\": \"Ecumenical Patriarch of Constantinople\", \"relevance\": 0.736151, \"emotion\": { \"sadness\": 0.125756, \"joy\": 0.193152, \"fear\": 0.06582, \"disgust\": 0.053097, \"anger\": 0.072421 }, \"count\": 1 } ], \"entities\": [ { \"type\": \"Location\", \"text\": \"Constantinople\", \"relevance\": 0.970822, \"emotion\": { \"sadness\": 0.106033, \"joy\": 0.363353, \"fear\": 0.051369, \"disgust\": 0.044808, \"anger\": 0.062089 }, \"count\": 3, \"confidence\": 0.988081 }, { \"type\": \"Person\", \"text\": \"George\", \"relevance\": 0.674048, \"emotion\": { \"sadness\": 0, \"joy\": 0, \"fear\": 0, \"disgust\": 0, \"anger\": 0 }, \"count\": 1, \"confidence\": 0.993361 } ] };\n    \n    this.setLogReturnedValue(response.data);\n    this.setState({sentimentOutput:<EmotionTable emotions={response.data.keywords}/>});\n    this.setState({sentimentPersonsOutput:<EmotionTable emotions={response.data.entities}/>});\n    this.setState({sentimentOutput:<ConcatenateTables components={[this.state.sentimentOutput,this.state.sentimentPersonsOutput]}/>});\n    // END MOCK\n   \n  }\n  \n  componentDidMount(){\n    document.title = \"Sentiment Analyzer\"\n  }\n\n  render() {\n    return (  \n      <div className=\"App\">\n      <button className=\"btn btn-info\" onClick={this.renderTextArea}>Text</button>\n        <button className=\"btn btn-dark\"  onClick={this.renderTextBox}>URL</button>\n        <br/><br/>\n        {this.state.innercomp}\n        <br/>\n        <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\n        <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\n         <br/>\n         <h2>\"DEBUG : response from Watson with NODE by JSON over HTTP\"</h2>\n         {this.logvalue}\n         <br/>\n         <h2>\"OUTPUT : response from Watson with REAL\"</h2>\n         {this.state.sentimentOutput}\n      </div>\n      );\n    }\n}\n//<br/>\n//            {this.state.sentimentOutput}\n//        <br/>\n//            {this.logvalue}\n//        <br/>\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}